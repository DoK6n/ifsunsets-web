/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuideRouteImport } from './routes/guide'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NewsIndexRouteImport } from './routes/news.index'
import { Route as CommunityIndexRouteImport } from './routes/community.index'
import { Route as NewsIdRouteImport } from './routes/news.$id'
import { Route as CommunityCreateRouteImport } from './routes/community.create'
import { Route as CommunityIdRouteImport } from './routes/community.$id'
import { ServerRoute as ApiYoutubePlaylistRouteServerRouteImport } from './routes/api/youtube/playlist.route'
import { ServerRoute as ApiStoveArticlesRouteServerRouteImport } from './routes/api/stove/articles.route'
import { ServerRoute as ApiStoveSystemRequirementRouteServerRouteImport } from './routes/api/stove/system.requirement.route'
import { ServerRoute as ApiStoveProductCommunityCoverRouteServerRouteImport } from './routes/api/stove/product.community-cover.route'

const rootServerRouteImport = createServerRootRoute()

const GuideRoute = GuideRouteImport.update({
  id: '/guide',
  path: '/guide',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NewsIndexRoute = NewsIndexRouteImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityIndexRoute = CommunityIndexRouteImport.update({
  id: '/community/',
  path: '/community/',
  getParentRoute: () => rootRouteImport,
} as any)
const NewsIdRoute = NewsIdRouteImport.update({
  id: '/news/$id',
  path: '/news/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityCreateRoute = CommunityCreateRouteImport.update({
  id: '/community/create',
  path: '/community/create',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityIdRoute = CommunityIdRouteImport.update({
  id: '/community/$id',
  path: '/community/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiYoutubePlaylistRouteServerRoute =
  ApiYoutubePlaylistRouteServerRouteImport.update({
    id: '/api/youtube/playlist',
    path: '/api/youtube/playlist',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiStoveArticlesRouteServerRoute =
  ApiStoveArticlesRouteServerRouteImport.update({
    id: '/api/stove/articles',
    path: '/api/stove/articles',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiStoveSystemRequirementRouteServerRoute =
  ApiStoveSystemRequirementRouteServerRouteImport.update({
    id: '/api/stove/system/requirement',
    path: '/api/stove/system/requirement',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiStoveProductCommunityCoverRouteServerRoute =
  ApiStoveProductCommunityCoverRouteServerRouteImport.update({
    id: '/api/stove/product/community-cover',
    path: '/api/stove/product/community-cover',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/guide': typeof GuideRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/news/$id': typeof NewsIdRoute
  '/community': typeof CommunityIndexRoute
  '/news': typeof NewsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/guide': typeof GuideRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/news/$id': typeof NewsIdRoute
  '/community': typeof CommunityIndexRoute
  '/news': typeof NewsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/guide': typeof GuideRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/create': typeof CommunityCreateRoute
  '/news/$id': typeof NewsIdRoute
  '/community/': typeof CommunityIndexRoute
  '/news/': typeof NewsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/guide'
    | '/community/$id'
    | '/community/create'
    | '/news/$id'
    | '/community'
    | '/news'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/guide'
    | '/community/$id'
    | '/community/create'
    | '/news/$id'
    | '/community'
    | '/news'
  id:
    | '__root__'
    | '/'
    | '/guide'
    | '/community/$id'
    | '/community/create'
    | '/news/$id'
    | '/community/'
    | '/news/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuideRoute: typeof GuideRoute
  CommunityIdRoute: typeof CommunityIdRoute
  CommunityCreateRoute: typeof CommunityCreateRoute
  NewsIdRoute: typeof NewsIdRoute
  CommunityIndexRoute: typeof CommunityIndexRoute
  NewsIndexRoute: typeof NewsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/stove/articles': typeof ApiStoveArticlesRouteServerRoute
  '/api/youtube/playlist': typeof ApiYoutubePlaylistRouteServerRoute
  '/api/stove/product/community-cover': typeof ApiStoveProductCommunityCoverRouteServerRoute
  '/api/stove/system/requirement': typeof ApiStoveSystemRequirementRouteServerRoute
}
export interface FileServerRoutesByTo {
  '/api/stove/articles': typeof ApiStoveArticlesRouteServerRoute
  '/api/youtube/playlist': typeof ApiYoutubePlaylistRouteServerRoute
  '/api/stove/product/community-cover': typeof ApiStoveProductCommunityCoverRouteServerRoute
  '/api/stove/system/requirement': typeof ApiStoveSystemRequirementRouteServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/stove/articles': typeof ApiStoveArticlesRouteServerRoute
  '/api/youtube/playlist': typeof ApiYoutubePlaylistRouteServerRoute
  '/api/stove/product/community-cover': typeof ApiStoveProductCommunityCoverRouteServerRoute
  '/api/stove/system/requirement': typeof ApiStoveSystemRequirementRouteServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/stove/articles'
    | '/api/youtube/playlist'
    | '/api/stove/product/community-cover'
    | '/api/stove/system/requirement'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/stove/articles'
    | '/api/youtube/playlist'
    | '/api/stove/product/community-cover'
    | '/api/stove/system/requirement'
  id:
    | '__root__'
    | '/api/stove/articles'
    | '/api/youtube/playlist'
    | '/api/stove/product/community-cover'
    | '/api/stove/system/requirement'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiStoveArticlesRouteServerRoute: typeof ApiStoveArticlesRouteServerRoute
  ApiYoutubePlaylistRouteServerRoute: typeof ApiYoutubePlaylistRouteServerRoute
  ApiStoveProductCommunityCoverRouteServerRoute: typeof ApiStoveProductCommunityCoverRouteServerRoute
  ApiStoveSystemRequirementRouteServerRoute: typeof ApiStoveSystemRequirementRouteServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/guide': {
      id: '/guide'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news/': {
      id: '/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/': {
      id: '/community/'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news/$id': {
      id: '/news/$id'
      path: '/news/$id'
      fullPath: '/news/$id'
      preLoaderRoute: typeof NewsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/create': {
      id: '/community/create'
      path: '/community/create'
      fullPath: '/community/create'
      preLoaderRoute: typeof CommunityCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community/$id': {
      id: '/community/$id'
      path: '/community/$id'
      fullPath: '/community/$id'
      preLoaderRoute: typeof CommunityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/youtube/playlist': {
      id: '/api/youtube/playlist'
      path: '/api/youtube/playlist'
      fullPath: '/api/youtube/playlist'
      preLoaderRoute: typeof ApiYoutubePlaylistRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/stove/articles': {
      id: '/api/stove/articles'
      path: '/api/stove/articles'
      fullPath: '/api/stove/articles'
      preLoaderRoute: typeof ApiStoveArticlesRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/stove/system/requirement': {
      id: '/api/stove/system/requirement'
      path: '/api/stove/system/requirement'
      fullPath: '/api/stove/system/requirement'
      preLoaderRoute: typeof ApiStoveSystemRequirementRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/stove/product/community-cover': {
      id: '/api/stove/product/community-cover'
      path: '/api/stove/product/community-cover'
      fullPath: '/api/stove/product/community-cover'
      preLoaderRoute: typeof ApiStoveProductCommunityCoverRouteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuideRoute: GuideRoute,
  CommunityIdRoute: CommunityIdRoute,
  CommunityCreateRoute: CommunityCreateRoute,
  NewsIdRoute: NewsIdRoute,
  CommunityIndexRoute: CommunityIndexRoute,
  NewsIndexRoute: NewsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiStoveArticlesRouteServerRoute: ApiStoveArticlesRouteServerRoute,
  ApiYoutubePlaylistRouteServerRoute: ApiYoutubePlaylistRouteServerRoute,
  ApiStoveProductCommunityCoverRouteServerRoute:
    ApiStoveProductCommunityCoverRouteServerRoute,
  ApiStoveSystemRequirementRouteServerRoute:
    ApiStoveSystemRequirementRouteServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
